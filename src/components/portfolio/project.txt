import { useLayoutEffect, useRef, useState } from 'react';
import { gsap } from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';
import { ArrowUpRight, Github } from 'lucide-react';
import Lenis from 'lenis';

// Import your project images
import cmsImage from '@/assets/cms.png';
import cognifyImage from '@/assets/cognify.png';
import igadsEcomImage from '@/assets/igadsstore.png';
import igadsLandingImage from '@/assets/igaads.png';
import schoolImage from '@/assets/school.png';

gsap.registerPlugin(ScrollTrigger);

const ProjectsSection = () => {
  const projects = [
    { 
      id: 1, 
      title: 'Complaint Management System', 
      image: cmsImage, 
      tags: ['React.js', 'TailwindCSS', 'GoogleMap API', 'Node.js','MongoDB'], 
      description: 'A web application for municipalities to manage and track public complaints using interactive heatmaps and real-time data analytics.',
      liveUrl: '#', // Replace with your live project URL
      github: 'https://github.com/yourusername/complaint-management-system'
    },
    { 
      id: 2, 
      title: 'Cognify – AI Learning Platform', 
      image: cognifyImage, 
      tags: ['React.js', 'JWT', 'Gamified UI', 'AI Chatbot', 'Node.js'], 
      description: 'An AI-powered platform for child learning and screening, featuring gamified modules and an interactive chatbot to assist learning.',
      liveUrl: '#',
      github: 'https://github.com/yourusername/cognify'
    },
    { 
      id: 3, 
      title: 'IGADS E-commerce Website', 
      image: igadsEcomImage, 
      tags: ['Shopify', 'Liquid', 'E-commerce'], 
      description: 'A fully functional e-commerce store for an Apple reselling brand, built on the Shopify platform for robust performance and scalability.',
      liveUrl: '#',
      github: 'https://github.com/yourusername/igads-ecommerce'
    },
    { 
      id: 4, 
      title: 'IGADS Landing Page', 
      image: igadsLandingImage, 
      tags: ['TypeScript', 'TailwindCSS', 'Framer Motion'], 
      description: 'A modern and sleek landing page featuring 3D animations and smooth transitions to capture user attention and drive conversions.',
      liveUrl: '#',
      github: 'https://github.com/yourusername/igads-landing'
    },
    { 
      id: 5, 
      title: 'Modern School Website', 
      image: schoolImage, 
      tags: ['TypeScript', 'TailwindCSS', 'Responsive UI'], 
      description: 'A clean, responsive, and user-friendly website for an educational institution, designed to be accessible for students, parents, and staff.',
      liveUrl: '#',
      github: 'https://github.com/yourusername/school-website'
    },
  ];

  const componentRef = useRef(null);
  const slidesRef = useRef<HTMLDivElement[]>([]);
  const [cursorPos, setCursorPos] = useState({ x: 0, y: 0 });
  const [hovering, setHovering] = useState(false);
  const cursorRef = useRef<HTMLDivElement>(null);

  const handleMouseMove = (e: React.MouseEvent) => {
    setCursorPos({ x: e.clientX, y: e.clientY });
  };
  
  // Lenis setup for smooth scrolling
  useLayoutEffect(() => {
    const lenis = new Lenis();
    function raf(time: number) {
      lenis.raf(time);
      requestAnimationFrame(raf);
    }
    requestAnimationFrame(raf);
    return () => lenis.destroy();
  }, []);

  // GSAP ScrollTrigger animation setup
  useLayoutEffect(() => {
    let ctx = gsap.context(() => {
      const slides = slidesRef.current;
      const tl = gsap.timeline({
        scrollTrigger: {
          trigger: componentRef.current,
          start: 'top top',
          end: () => `+=${(slides.length - 1) * 1000}`,
          pin: true,
          scrub: 1,
          snap: {
            snapTo: 1 / (slides.length - 1),
            duration: 0.3,
            ease: 'power1.inOut',
          },
        }
      });
      slides.forEach((slide, i) => {
        if (i > 0) {
          tl.from(slide, { yPercent: 100, ease: 'none' });
        }
      });
    }, componentRef);
    return () => ctx.revert();
  }, []);
  
  // Custom cursor animation
  useLayoutEffect(() => {
    if (cursorRef.current) {
      gsap.to(cursorRef.current, {
        x: cursorPos.x - 48,
        y: cursorPos.y - 48,
        duration: 0.2,
        ease: 'power2.out',
      });
    }
  }, [cursorPos]);

  return (
    <section
      ref={componentRef}
      className="relative h-screen text-white overflow-hidden font-poppins bg-black"
      onMouseMove={handleMouseMove}
    >
      {/* Custom Cursor */}
      {hovering && (
        <div ref={cursorRef} className="fixed pointer-events-none z-50 w-24 h-24 rounded-full flex items-center justify-center bg-white/10 backdrop-blur-sm">
          <ArrowUpRight className="w-8 h-8 text-white" />
        </div>
      )}

      {/* Slides Container */}
      {projects.map((project, index) => (
        <div
          key={project.id}
          ref={(el) => (slidesRef.current[index] = el!)}
          className="absolute inset-0 h-full w-full flex items-center justify-center bg-[radial-gradient(ellipse_at_center,_var(--tw-gradient-stops))] from-neutral-800 to-black p-8"
        >
          {/* Main grid container is now h-full to fill the screen */}
          <div className="grid grid-cols-1 lg:grid-cols-5 gap-x-12 items-center w-full max-w-7xl mx-auto h-full">
            
            {/* Left Column: Image */}
            <div 
              className={`w-full lg:col-span-3 ${index % 2 === 0 ? 'lg:order-1' : 'lg:order-2'}`}
              onMouseEnter={() => setHovering(true)}
              onMouseLeave={() => setHovering(false)}
            >
              <a 
                href={project.liveUrl} 
                target="_blank" 
                rel="noopener noreferrer"
                className="block p-2 bg-white/[.03] rounded-3xl border border-white/10 shadow-[0_0_80px_rgba(255,255,255,0.08)] backdrop-blur-sm group cursor-none"
              >
                <div className="aspect-video w-full overflow-hidden rounded-2xl">
                  <img 
                    src={project.image} 
                    alt={project.title} 
                    className="w-full h-full object-cover group-hover:scale-105 transition-transform duration-500 ease-in-out"
                  />
                </div>
              </a>
            </div>

            {/* Right Column: Details */}
            <div className={`w-full lg:col-span-2 ${index % 2 === 0 ? 'lg:order-2' : 'lg:order-1'}`}>
              <h3 className="text-3xl md:text-4xl font-semibold font-poppins text-left text-white">
                {project.title}
              </h3>
              <p className="mt-4 text-gray-300 font-poppins leading-relaxed text-left">
                {project.description}
              </p>
              
              <div className="mt-6 flex flex-wrap gap-3">
                {project.tags.map(tag => (
                  <span 
                    key={tag} 
                    className="px-4 py-2 bg-white/5 border border-white/10 rounded-full text-sm text-lime-300 font-medium"
                  >
                    {tag}
                  </span>
                ))}
              </div>

              <div className="mt-8 flex items-center gap-4">
                <a 
                  href={project.liveUrl} 
                  target="_blank" 
                  rel="noopener noreferrer"
                  className="inline-flex items-center gap-2 px-6 py-3 rounded-full bg-lime-400 text-black font-semibold hover:bg-lime-300 transition-colors duration-300"
                >
                  View Live
                  <ArrowUpRight className="w-5 h-5" />
                </a>
                <a 
                  href={project.github} 
                  target="_blank" 
                  rel="noopener noreferrer"
                  className="inline-flex items-center gap-2 px-6 py-3 rounded-full bg-white/10 text-white font-semibold hover:bg-white/20 transition-colors duration-300"
                >
                  <Github className="w-5 h-5" />
                  View on GitHub
                </a>
              </div>
            </div>
          </div>
        </div>
      ))}
    </section>
  );
};

export default ProjectsSection;

******************************************************************************

import { useLayoutEffect, useRef, useState } from 'react';
import { gsap } from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';
import { ArrowUpRight, ChevronLeft, ChevronRight } from 'lucide-react';
import Lenis from 'lenis';

import cmsImage from '@/assets/cms.png';
import cognifyImage from '@/assets/cognify.png';
import igadsEcomImage from '@/assets/igadsstore.png';
import igadsLandingImage from '@/assets/igaads.png';
import schoolImage from '@/assets/school.png';

gsap.registerPlugin(ScrollTrigger);

const ProjectsSection = () => {
  const projects = [
    { id: 1, title: 'Complaint Management System', image: cmsImage, tags: ['React.js', 'TailwindCSS', 'GoogleMap API', 'Node.js', 'mongoDB'], date: '2025', company: 'SmartCity CMS', github: 'https://github.com/Atheeek/City-fix' },
    { id: 2, title: 'Cognify – Child Learning & Screening Platform', image: cognifyImage, tags: ['React.js', 'JWT Webtokens', 'Gamified Learning', 'AI Chatbot', 'Node.js', 'mongoDB', 'express'], date: '2025', company: 'Cognify', github: 'https://github.com/Atheeek/Cognify-project' },
    { id: 3, title: 'IGADS E-commerce Website', image: igadsEcomImage, tags: ['Shopify'], date: '2024', company: 'IGADS', github: 'https://igadsmobile.myshopify.com' },
    { id: 4, title: 'IGADS Landing Page', image: igadsLandingImage, tags: ['Typescript', 'TailwindCSS', '3D Animations', 'framer-motion'], date: '2024', company: 'IGADS', github: 'https://igads.vercel.app' },
    { id: 5, title: 'Modern School Website', image: schoolImage, tags: ['Typescript', 'TailwindCSS', 'Responsive UI'], date: '2023', company: 'School Project', github: 'https://tems-school.vercel.app/' },
  ];

  const componentRef = useRef(null);
  const slidesRef = useRef<HTMLDivElement[]>([]);
  const [cursorPos, setCursorPos] = useState({ x: 0, y: 0 });
  const [hovering, setHovering] = useState(false);
  const cursorRef = useRef<HTMLDivElement>(null);

  const handleMouseMove = (e: React.MouseEvent) => {
    setCursorPos({ x: e.clientX, y: e.clientY });
  };

  useLayoutEffect(() => {
    const lenis = new Lenis();

    function raf(time: number) {
      lenis.raf(time);
      requestAnimationFrame(raf);
    }

    requestAnimationFrame(raf);

    return () => {
      lenis.destroy();
    }
  }, []);

  useLayoutEffect(() => {
    let ctx = gsap.context(() => {
      const slides = slidesRef.current;
      const tl = gsap.timeline({
        scrollTrigger: {
          trigger: componentRef.current,
          start: 'top top',
          end: () => `+=${(slides.length - 1) * 1000}`,
          pin: true,
          scrub: 1,
          snap: {
            snapTo: 1 / (slides.length - 1),
            duration: 0.3,
            ease: 'power1.inOut',
          },
        }
      });
      slides.forEach((slide, i) => {
        if (i > 0) {
          tl.from(slide, { yPercent: 100, ease: 'none' });
        }
      });
    }, componentRef);
    return () => ctx.revert();
  }, []);

  useLayoutEffect(() => {
    if (cursorRef.current) {
      gsap.to(cursorRef.current, {
        x: cursorPos.x - 48,
        y: cursorPos.y - 48,
        duration: 0.2,
        ease: 'power2.out',
      });
    }
  }, [cursorPos]);

  return (
    <section id="projects"
      ref={componentRef}
      className="relative h-screen text-white overflow-hidden font-poppins bg-black"
      onMouseMove={handleMouseMove}
    >
      {hovering && (
        <div
          ref={cursorRef}
          className="fixed pointer-events-none z-50 w-24 h-24 rounded-full flex items-center justify-center bg-white/10 backdrop-blur-sm"
        >
          <ArrowUpRight className="w-8 h-8 text-lime-400"/>
        </div>
      )}
      {projects.map((project) => (
        <div
          key={project.id}
          ref={(el) => (slidesRef.current[project.id - 1] = el!)}
          className="absolute inset-0 h-full w-full flex items-center justify-center bg-[radial-gradient(ellipse_at_center,_var(--tw-gradient-stops))] from-neutral-800 to-black"
        >
          <div className="relative h-full w-full flex items-center justify-center">
            <div className="absolute top-1/2 -translate-y-1/2 left-8 md:left-16 text-white/50 text-sm hidden md:block">
              <p>DATE: {project.date}</p>
            </div>
            <div className="absolute top-1/2 -translate-y-1/2 right-8 md:right-16 text-white/50 text-sm hidden md:block">
              <p>{project.company}</p>
            </div>
            <button className="absolute top-1/2 -translate-y-1/2 left-4 md:left-8 w-10 h-10 rounded-full bg-white/10 flex items-center justify-center hover:bg-white/20 transition-colors">
              <ChevronLeft className="w-5 h-5" />
            </button>
            <button className="absolute top-1/2 -translate-y-1/2 right-4 md:right-8 w-10 h-10 rounded-full bg-white/10 flex items-center justify-center hover:bg-white/20 transition-colors">
              <ChevronRight className="w-5 h-5" />
            </button>
            <div className="flex flex-col items-center gap-10 w-full max-w-4xl px-4">
              <p className="text-white/50 text-xs uppercase mt-10 tracking-widest">MY WORK</p>
              <h2 className="text-3xl md:text-4xl font-[400] font-poppins text-center text-white">
                {project.title}
              </h2>
              <a
                href={project.github}
                target="_blank"
                rel="noopener noreferrer"
                className="w-full max-w-2xl bg-white/[.03] rounded-3xl border border-white/10 p-2 shadow-[0_0_80px_rgba(255,255,255,0.08)] backdrop-blur-sm cursor-none"
                onMouseEnter={() => setHovering(true)}
                onMouseLeave={() => setHovering(false)}
              >
                <div className="aspect-video w-full overflow-hidden rounded-2xl">
                  <img src={project.image} alt={project.title} className="w-full h-full object-cover" />
                </div>
              </a>
              <div className="flex flex-wrap gap-3 justify-center">
                {project.tags.map(tag => (
                  <span key={tag} className="px-4 py-2 bg-white/5 border border-white/10 rounded-full text-sm text-white/80">
                    {tag}
                  </span>
                ))}
              </div>
            </div>
          </div>
        </div>
      ))}
    </section>
  );
};

export default ProjectsSection;


***********************************************************************

import React from 'react';
import { CircularGallery, GalleryItem } from '@/components/ui/circular-gallery';

const galleryData: GalleryItem[] = [
  {
    common: 'Lion',
    binomial: 'Panthera leo',
    photo: {
      url: 'https://images.unsplash.com/photo-1583499871880-de841d1ace2a?w=900&auto=format&fit=crop&q=80',
      text: 'lion couple kissing on a brown rock',
      pos: '47% 35%',
      by: 'Clément Roy'
    }
  },
  {
    common: 'Asiatic elephant',
    binomial: 'Elephas maximus',
    photo: {
      url: 'https://images.unsplash.com/photo-1571406761758-9a3eed5338ef?w=900&auto=format&fit=crop&q=80',
      text: 'herd of Sri Lankan elephants walking away from a river',
      pos: '75% 65%',
      by: 'Alex Azabache'
    }
  },
  {
    common: 'Red-tailed black cockatoo',
    binomial: 'Calyptorhynchus banksii',
    photo: {
      url: 'https://images.unsplash.com/photo-1619664208054-41eefeab29e9?w=900&auto=format&fit=crop&q=80',
      text: 'close-up of a black cockatoo',
      pos: '53% 43%',
      by: 'David Clode'
    }
  },
  {
    common: 'Dromedary',
    binomial: 'Camelus dromedarius',
    photo: {
      url: 'https://images.unsplash.com/photo-1662841238473-f4b137e123cb?w=900&auto=format&fit=crop&q=80',
      text: 'camel and her new born calf walking in the Sahara desert',
      pos: '65% 65%',
      by: 'Moaz Tobok'
    }
  },
  {
    common: 'Polar bear',
    binomial: 'Ursus maritimus',
    photo: {
      url: 'https://images.unsplash.com/photo-1589648751789-c8ecb7a88bd5?w=900&auto=format&fit=crop&q=80',
      text: 'polar bear on the snow, by the water, raised on the hind legs, front paws together',
      pos: '50% 25%',
      by: 'Hans-Jurgen Mager'
    }
  },
  {
    common: 'Giant panda',
    binomial: 'Ailuropoda melanoleuca',
    photo: {
      url: 'https://images.unsplash.com/photo-1659540181281-1d89d6112832?w=900&auto=format&fit=crop&q=80',
      text: 'giant panda hanging from a tree branch',
      pos: '47%',
      by: 'Jiachen Lin'
    }
  },
  {
    common: 'Grévy\'s zebra',
    binomial: 'Equus grevyi',
    photo: {
      url: 'https://images.unsplash.com/photo-1526095179574-86e545346ae6?w=900&auto=format&fit=crop&q=80',
      text: 'zebra standing on wheat field, looking back towards the camera',
      pos: '65% 35%',
      by: 'Jeff Griffith'
    }
  },
  {
    common: 'Cheetah',
    binomial: 'Acinonyx jubatus',
    photo: {
      url: 'https://images.unsplash.com/photo-1541707519942-08fd2f6480ba?w=900&auto=format&fit=crop&q=80',
      text: 'cheetah sitting in the grass under a blue sky',
      by: 'Mike Bird'
    }
  },
  {
    common: 'King penguin',
    binomial: 'Aptenodytes patagonicus',
    photo: {
      url: 'https://images.unsplash.com/photo-1595792419466-23cec2476fa6?w=900&auto=format&fit=crop&q=80',
      text: 'king penguin with a fluffy brown chick on grey rocks',
      pos: '35%',
      by: 'Martin Wettstein'
    }
  },
  {
    common: 'Red panda',
    binomial: 'Ailurus fulgens',
    photo: {
      url: 'https://images.unsplash.com/photo-1689799513565-44d2bc09d75b?w=900&auto=format&fit=crop&q=80',
      text: 'a red panda in a tree',
      by: 'Niels Baars'
    }
  },
];

export default function GalleryPage() {
  return (
    // This outer container provides the scrollable height
    <div className="w-full bg-background text-foreground" style={{ height: '500vh' }}>
      {/* This inner container sticks to the top while scrolling */}
      <div className="w-full h-screen sticky top-0 flex flex-col items-center justify-center overflow-hidden">
        <div className="text-center mb-8 absolute top-16 z-10">
          {/* <h1 className="text-4xl font-bold">Animal Gallery</h1>
          <p className="text-muted-foreground">Scroll to rotate the gallery</p> */}
        </div>
        <div className="w-full h-full">
          <CircularGallery items={galleryData} />
        </div>
      </div>
    </div>
  );
}


***************************************************************************


import React, { useState } from "react";

const ContactForm: React.FC = () => {
  const [formData, setFormData] = useState({
    email: "",
    phone: "",
    interest: "",
    budget: "",
    message: "",
  });

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    console.log("Form submitted:", formData);
    // TODO: send to API / backend
  };

  return (
    <section className="bg-gray-50 py-16 px-6 md:px-20">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="flex justify-between items-start mb-12">
          <div>
            <p className="text-sm uppercase tracking-wide text-gray-500">
              Contact Me
            </p>
            <h2 className="text-5xl text-black font-light tracking-tight">Get In Touch</h2>
          </div>
          <a
            href="mailto:atheek163@gmail.com"
            className="px-5 py-2 border rounded-full text-sm text-gray-700 hover:bg-gray-100 transition"
          >
            Mail me at: atheek163@gmail.com
          </a>
        </div>

        {/* Form */}
        <form onSubmit={handleSubmit} className="space-y-8">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            <div>
              <label className="block mb-2 text-gray-800">Your Email</label>
              <input
                type="email"
                name="email"
                value={formData.email}
                onChange={handleChange}
                placeholder="janesmith@email.com"
                className="w-full border-b border-gray-300 bg-transparent focus:outline-none focus:border-black py-2"
                required
              />
            </div>
            <div>
              <label className="block mb-2 text-gray-800">Your Phone</label>
              <input
                type="text"
                name="phone"
                value={formData.phone}
                onChange={handleChange}
                placeholder="01-234-5678"
                className="w-full border-b border-gray-300 bg-transparent focus:outline-none focus:border-black py-2"
              />
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            <div>
              <label className="block mb-2 text-gray-800">I'm interested in...</label>
              <select
                name="interest"
                value={formData.interest}
                onChange={handleChange}
                className="w-full border-b border-gray-300 text-black bg-transparent focus:outline-none focus:border-black py-2"
              >
                <option value="">Select...</option>
                <option value="web">Web Development</option>
                <option value="design">UI/UX Design</option>
                <option value="app">Mobile App</option>
              </select>
            </div>
            <div>
              <label className="block mb-2 text-gray-800">Your Budget</label>
              <select
                name="budget"
                value={formData.budget}
                onChange={handleChange}
                className="w-full border-b border-gray-300 bg-transparent text-black focus:outline-none focus:border-black py-2"
              >
                <option value="">Select...</option>
                <option value="low">$1000 - $3000</option>
                <option value="medium">$3000 - $7000</option>
                <option value="high">$7000+</option>
              </select>
            </div>
          </div>

          <div>
            <label className="block mb-2 text-gray-800">More About The Project</label>
            <textarea
              name="message"
              value={formData.message}
              onChange={handleChange}
              placeholder="Type here..."
              className="w-full border-b border-gray-300 bg-transparent text-black focus:outline-none focus:border-black py-2 h-24"
            />
          </div>

          <button
            type="submit"
            className="flex items-center gap-2 bg-black text-white px-6 py-3 rounded-full hover:bg-gray-800 transition"
          >
            Send Request
            <span className="w-6 h-6 flex items-center justify-center rounded-full bg-white text-black">
              →
            </span>
          </button>
        </form>
      </div>
    </section>
  );
};

export default ContactForm;
